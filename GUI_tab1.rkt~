#lang racket

(#%require (prefix util: "Utillities.rkt"))

   
    ;TAB 1
    ;-----
    
    ;genereren van de  buttons voor de  roomtab
    (define (buttongenerator lst destination tab)
      (cond ( (empty? lst)
              (display "done"))
            ((not (equal? (util:list_size lst) (util:list_size destination))) (error 'buttongenerator-roomtab "labellist and destination list  are not of the same size"))
            
            (else (let ((name (car lst))
                        (dest (car destination)))
                    (new button% [parent tab] [label name]
                         [vert-margin 20]	
                         [horiz-margin 20]	 
                         [min-width 20]	 
                         [min-height 20]
                         [callback (lambda (button click) (send tab-panel change-children (lambda (x) (list dest add_button delete_button)))
                                     (set! current-listbox dest)
                                     (set! current-steward (get-steward name))
                                     (update-list-box dest))])
                    (buttongenerator (cdr lst) (cdr destination) tab)))))
    
    ;genereren van list-boxen voor tab1
    
    (define (list-box-tab1 string) (new list-box%
                                   (label string)
                                   (parent tab-panel)
                                   (choices (util:send (get-steward string) 'list_devices_names))
                                   (style (list 'single
                                                'column-headers))
                                   (columns (list "Name"
                                                  "Type"
                                                  "Status"
                                                  "Serial"
                                                  "Last Update"
                                                  ))))
    
    
    ;de verschillende list-boxen
    
    (define list-box-bathroom (list-box-tab1 "Bathroom"))
    (define list-box-bedroom (list-box-tab1 "Bedroom"))
    (define list-box-livingroom (list-box-tab1 "Livingroom"))
    
    
    (define tab1 (new vertical-panel%
                      [parent tab-panel]
                      [spacing 10]	 
                      [alignment (list 'center 'center)]
                      ))
    
    ;destination list moet nog automatisch gegenereerd worden 
    
    (buttongenerator listrooms (list list-box-livingroom list-box-bathroom list-box-bedroom) tab1)
    
    
    (define add_button (new button% [parent tab-panel ] [label "Add"] [callback (lambda (button click) (send add-dialog show #t))]))
    
    ;ADD-Dialog
    
    (define add-dialog (new dialog% [parent mainframe] 
                            [label "Add-Dialog"]))
    
    
    (define add-dialog_panel (new vertical-panel% [parent add-dialog]
                                  [min-width 400]
                                  [alignment '(center center)]
                                  [min-height 40]))
    
    (define name_device (new text-field% [parent add-dialog_panel] [label "Name"]))
    (define type (new choice% [parent add-dialog_panel] [label "Type"] [choices listdevices] ))
    (define serial (new text-field% [parent add-dialog_panel] [label "Serialnumber"]))
    (define com-adress (new text-field% [parent add-dialog_panel] [label "COM-adres"]))
    
    (define add_button-dialog (new button% [parent add-dialog ] [label "Add"] [callback (lambda (button click) (send add-dialog show #f)
                                                                                          (util:send current-steward 'add-device
                                                                                                    (determine-choice listdevices (send type get-selection))
                                                                                                     (send (send name_device get-editor) get-text)
                                                                                                     (send (send serial get-editor) get-text)
                                                                                                     (send (send com-adress get-editor) get-text))
                                                                                          (update-list-box current-listbox))]))
    
    (define delete_button (new button% [parent tab-panel ] [label "Delete"] [callback (lambda (button click)
                                                                                        
                                                                                        (util:send current-steward 'delete_device (send current-listbox get-string-selection))
                                                                                        
                                                                                        (update-list-box current-listbox))]))
    ;beslissen welke keuze je moet teruggeven bij een keuzeobject
    
    ;algmene functie 
   (define (determine-choice lst selection)
     (define (loop lst counter)
       (let ((choice (car lst)))
         (if (= counter selection)
             choice
             (loop (cdr lst) (+ counter 1)))))
     (if (< (util:list_size lst) selection)
         (error 'determine-choice-function "Selection is out of range of the list!")
         (loop lst 0)))
    

    
    ;listbox updater voor tab 1
    
    (define (update-list-box lst-box)
      (let ((namelst (util:send current-steward 'list_devices_names))
            (typelst (util:send current-steward 'list_devices_type))
            (statuslst (util:send current-steward 'list_devices_status))
            (seriallst (util:send current-steward 'list_devices_serial))
            (com-adresslst (util:send current-steward 'list_devices_com_adress)))
        (util:send current-steward 'get-location)
        (send lst-box set namelst typelst statuslst seriallst com-adresslst)))
    
    