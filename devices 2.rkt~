#lang racket


(#%require "Utillities.rkt")



(define (make-ready-to-write argport name)
  (if (output-port? argport)
      (open-output-file name)
      
      (begin (close-input-port argport)
             (open-output-file name))))


(define (make-ready-to-read argport name)
  (if (input-port? argport)
      argport
      (begin (close-output-port argport)
             (open-input-file name))))

;je moet je devices simuleren voor simulatie


(define (tempsensor name serialnumber port-adress)
  (let-values ([(input output) (make-pipe)]  ;aanmaken van outputfile bij het aanmaken van het object
        ;je mag er vanuit gaan dat je eerst een outputport hebt aangezien je eerst wil schrijven 
        ;voor je leest van je port
        
        (status 'output)  ;nodig om te weten of je als port een output of input port moet teruggeven
        (change #f)      ;nodig om eerste keer schrijven te overbruggen (zie "my-device-port")
        (written #f)    )           ;je moet omschakeling zien de overbruggen van inputfile naar outputfile voor de eerste keer.
    (define current-temp 25)
    
    (define (get-name) (begin
                           ;in produce-answer  lees je de file 
                         (write '(name  name) (make-ready-to-write port serialnumber))
                         (make-ready-to-read port serialnumber)))
    
    (define get-serialnumber serialnumber)
    (define get-portadress port-adress)
    (define (get-status) status)
    
    (define (get-temp) 
      (begin 
        (display "the current temparature is ")
        (display current-temp)
        (display " degrees")))
    
    (define (device-input-port)
      (begin
        (close-output-port port)
        (set! port (open-input-file serialnumber))
        port))
    
    (define (device-output-port)
      port)
    
    (define (produce-answer)
      
      (let* ( (written-command (read (make-ready-to-read port serialnumber)))
              (command (cadr written-command)))
        (case command
          ((name) (get-name))
          ((serial) get-serialnumber)
          ((temp)  get-temp)
          (else (error 'tempsensor "unknown message ~a" command)))))
    
    
    ;bij elke oproep van my-device-port wordt de variable port verandert in een iput/ouputport
    
    (define (my-device-port)
      (if written
          (produce-answer)
          'nothing)
      (if (eq? status 'output)
          (begin (set! status 'input)
                 output)
                 
          (begin (set! status 'output)
                 input)))
    
    
    
    (define (internal-dispatching message)
      (display "congrats you're in the internal dispatching"))
    ;(case message
    ;  ((name) get-name)
    ;  ((serial) get-serialnumber)
    ; ((temp)  get-temp)))
    
    (define (dispatch message)
      (case message
        ((status) get-status)
        ((get-device-port) my-device-port)
        (else (error 'tempsensor "unknown message ~a" message))))
    
    
    dispatch))



;
(define room-tempsensor (tempsensor "woonkamer" "1234" "tempsensor-woonkamer"))

;(send room-tempsensor  'get 'name)

;(send room-tempsensor  '(get name))


;testing met read








(write '(get name) (send room-tempsensor 'get-device-port))
(read (send room-tempsensor 'get-device-port))

